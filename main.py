from kivy.config import Config
Config.set('graphics', 'width', '360')
Config.set('graphics', 'height', '640')

from kivy.app import App
from inventory_ui import build_inventory_ui
from kivy.core.window import Window
from kivy.clock import Clock
from save import save_csv
from excel import save_to_excel
from manual_mode import add_to_temp_list as manual_add_to_temp_list
from kivy.uix.popup import Popup
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.textinput import TextInput
from kivy.uix.button import Button
from kivy.utils import platform
import json
import os
from datetime import datetime

class InventoryApp(App):
    def build(self):
        self.title = "–°–∫–ª–∞–¥ –¢–∞–≤—Ä–æ–≤–æ-2, –ë–µ–ª–≥–æ—Ä–æ–¥"
        self.autosave_every = 500
        self.autosave_counter = 0
        self.autosave_base_name = None

        # –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã new.json
        try:
            with open("new.json", "r", encoding="utf-8") as f:
                self.new_items = json.load(f)
        except:
            self.new_items = []

        return build_inventory_ui(self)

    def set_mode(self, mode):
        self.mode = mode
        self.label.text = f"[b]–†–µ–∂–∏–º: {'–ü–æ—Ç–æ–∫–æ–≤—ã–π' if mode == 'auto' else '–†—É—á–Ω–æ–π'}[/b]"

    def find_product(self, barcode):
        barcode = str(barcode).strip()

        def match(code):
            if isinstance(code, list):
                return barcode in [str(c).strip() for c in code]
            return str(code).strip() == barcode

        for item in self.sadopt:
            if match(item.get("–®—Ç—Ä–∏—Ö–∫–æ–¥")):
                return item
        for item in self.region:
            if match(item.get("–®—Ç—Ä–∏—Ö–∫–æ–¥")):
                return item
        for item in self.new_items:
            if match(item.get("–®—Ç—Ä–∏—Ö–∫–æ–¥")):
                return item
        return None

    def process_barcode(self):
        barcode = self.barcode_input.text.strip()
        if not barcode:
            return

        item = self.find_product(barcode)
        if item:
            name = item.get("–ù–∞–∑–≤–∞–Ω–∏–µ", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            self.qty_input.text = "1"
            self.product_name_input.text = name
            self.current_item = item

            if self.mode == "auto":
                self.add_to_temp_list()
        else:
            self.label.text = "[color=ff0000][b]–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω[/b][/color]"
            self.product_name_input.text = ""
            self.current_item = {}

            # –ó–≤—É–∫ –Ω–∞ Android
            if platform == "android":
                try:
                    from jnius import autoclass
                    PythonActivity = autoclass('org.kivy.android.PythonActivity')
                    MediaPlayer = autoclass('android.media.MediaPlayer')
                    Uri = autoclass('android.net.Uri')
                    sound = MediaPlayer.create(
                        PythonActivity.mActivity,
                        Uri.parse("file:///sdcard/Download/beep.mp3")
                    )
                    sound.start()
                except Exception as e:
                    print("–ó–≤—É–∫ –æ—à–∏–±–∫–∏ –Ω–µ –ø—Ä–æ–∏–≥—Ä–∞–ª—Å—è:", e)

            self.show_manual_entry_popup(barcode)

        # üü© –í–µ—Ä–Ω—É—Ç—å –∫—É—Ä—Å–æ—Ä –≤ –ø–æ–ª–µ –®—Ç—Ä–∏—Ö–∫–æ–¥
        Clock.schedule_once(lambda dt: setattr(self.barcode_input, 'focus', True), 0.05)

    def show_manual_entry_popup(self, barcode):
        box = BoxLayout(orientation='vertical', spacing=10, padding=10)
        input_name = TextInput(hint_text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", multiline=False)
        box.add_widget(input_name)

        def add_manual_item(instance):
            name = input_name.text.strip()
            if name:
                self.qty_input.text = "1"
                self.product_name_input.text = name
                self.current_item = {
                    "–ê—Ä—Ç–∏–∫—É–ª": "MANUAL",
                    "–ù–∞–∑–≤–∞–Ω–∏–µ": name,
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": "1",
                    "–®—Ç—Ä–∏—Ö–∫–æ–¥": barcode
                }

                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
                self.add_to_temp_list()
                self.popup.dismiss()

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ new.json
                new_entry = {
                    "–ê—Ä—Ç–∏–∫—É–ª": "MANUAL",
                    "–ù–∞–∑–≤–∞–Ω–∏–µ": name,
                    "–®—Ç—Ä–∏—Ö–∫–æ–¥": barcode
                }

                try:
                    path = "new.json"
                    if os.path.exists(path):
                        with open(path, "r", encoding="utf-8") as f:
                            data = json.load(f)
                    else:
                        data = []

                    # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–µ–π
                    if not any(str(item.get("–®—Ç—Ä–∏—Ö–∫–æ–¥")) == str(barcode) for item in data):
                        data.append(new_entry)
                        with open(path, "w", encoding="utf-8") as f:
                            json.dump(data, f, ensure_ascii=False, indent=2)

                        self.new_items.append(new_entry)

                except Exception as e:
                    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ new.json:", e)
            else:
                input_name.hint_text = "–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!"

        btn = Button(text="–î–æ–±–∞–≤–∏—Ç—å")
        btn.bind(on_press=add_manual_item)
        box.add_widget(btn)

        self.popup = Popup(title="–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", content=box, size_hint=(0.8, 0.4))
        self.popup.open()

    def add_to_temp_list(self):
        if self.mode == "auto":
            qty = self.qty_input.text.strip()
            employee = self.employee_input.text.strip()
            self.barcode_input.text = ""

            if not self.current_item or not qty or not employee:
                self.label.text = "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                return

            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            entry = {
                "–ê—Ä—Ç–∏–∫—É–ª": self.current_item.get("–ê—Ä—Ç–∏–∫—É–ª", ""),
                "–ù–∞–∑–≤–∞–Ω–∏–µ": self.current_item.get("–ù–∞–∑–≤–∞–Ω–∏–µ", ""),
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": qty,
                "–®—Ç—Ä–∏—Ö–∫–æ–¥": self.current_item.get("–®—Ç—Ä–∏—Ö–∫–æ–¥", ""),
                "–°–æ—Ç—Ä—É–¥–Ω–∏–∫": employee,
                "–í—Ä–µ–º—è": timestamp
            }

            self.data.append(entry)
            self.label.text = f"[b]–î–æ–±–∞–≤–ª–µ–Ω–æ:[/b] {entry['–ù–∞–∑–≤–∞–Ω–∏–µ']} x{qty}"
            self.qty_input.text = ""
            self.current_item = {}

            Clock.schedule_once(lambda dt: setattr(self.barcode_input, 'focus', True), 0.05)

            if len(self.data) % self.autosave_every == 0:
                self.autosave_counter += 1
                if self.autosave_base_name is None:
                    self.autosave_base_name = f"invent_{employee}_{datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}"
                filename = f"{self.autosave_base_name}-{self.autosave_counter}.xlsx"
                save_to_excel(self.data, employee, filename)
                self.label.text += f"\n–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {filename}"
        else:
            manual_add_to_temp_list(self)

if __name__ == "__main__":
    InventoryApp().run()
